const userAccount=require('../models/userAccount');
const trip=require('../models/trip');
const offer=require('../models/offer');
const news=require('../models/news');
const employee=require('../models/employee');
const customer=require('../models/customer');
const company=require('../models/company');
const comEmploye=require('../models/comEmploye');
const city=require('../models/city');
const chear=require('../models/chear');
const bus=require('../models/bus');
const customersAccount=require('../models/customersAccount');
const reservation=require('../models/reservation');
const bookedChear=require('../models/bookedChear');
const companyCities=require('../models/companyCities');

userAccount.belongsToMany(customer,{through:customersAccount});
trip.belongsToMany(customer,{through:reservation});
trip.belongsToMany(chear,{through:bookedChear});
trip.belongsTo(company,{onDelete:'CASCADE'});
trip.belongsTo(city,{as:'from',foreignKey:'fromCityId', foreignKeyConstraint: true});
trip.belongsTo(city,{as:'to',foreignKey:'toCityId', foreignKeyConstraint: true});
trip.belongsTo(bus);
offer.belongsTo(comEmploye);
news.belongsTo(comEmploye);
employee.belongsTo(company,{onDelete:'CASCADE'});
customer.belongsToMany(trip,{through:reservation});
customer.belongsToMany(userAccount,{through:customersAccount});
company.hasMany(trip);
company.hasMany(bus);
company.belongsToMany(city,{through:companyCities});
company.hasMany(employee);
company.belongsTo(comEmploye);
comEmploye.hasMany(company);
comEmploye.hasMany(offer);
comEmploye.hasMany(news);
comEmploye.hasMany(city);
city.belongsTo(comEmploye);
city.hasMany(trip);
city.belongsToMany(company,{through:companyCities});
chear.belongsToMany(trip,{through:bookedChear});
bus.hasMany(trip);
bus.belongsTo(company,{onDelete:'CASCADE'});